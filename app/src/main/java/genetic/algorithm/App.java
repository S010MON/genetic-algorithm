/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package genetic.algorithm;

import java.util.ArrayList;
import java.util.PriorityQueue;

public class App
{

    private static double alpha = 0.01;  // Mutation Rate
    private static char[] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',' '};

    public static void main(String[] args)
    {
        String target = "hello world";
        if(args.length != 0)
            target = args[0];

        System.out.println("Target: " + target);

        ArrayList<String> gen = initialise(target.length(), 100);
        String best = gen.get(0);

        while(!best.equals(target))
        {
            gen = select(gen, target);
            best = gen.get(0);
            System.out.println(best);
            gen = breed(gen);
        }
    }


    public static ArrayList<String> initialise(int wordLength, int popSize)
    {
        ArrayList<String> population = new ArrayList<>();

        for(int i = 0; i < popSize; i++)
        {
            population.add(randomWord(wordLength));
        }
        return population;
    }


    public static String randomWord(int length)
    {
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < length; i++)
        {
            sb.append(alphabet[ (int) (Math.random() * alphabet.length) ]);
        }
        return sb.toString();
    }


    public static ArrayList<String> breed(ArrayList<String> population)
    {
        ArrayList<String> new_pop = new ArrayList<>();
        for(int i = 0; i < population.size(); i++)
        {
            for(int j = 0; j < population.size(); j++)
            {
                if(i == j)
                    new_pop.add(population.get(i));
                else
                    new_pop.add(mutate(crossover(population.get(i), population.get(j))));
            }
        }
        return new_pop;
    }


    public static String crossover(String s1, String s2)
    {
        char[] child = new char[s1.length()];
        for(int i = 0; i < child.length; i++)
        {
            if(Math.random() > 0.5)
                child[i] = s1.charAt(i);
            else
                child[i] = s2.charAt(i);
        }
        return String.valueOf(child);
    }


    public static  String mutate(String s)
    {
        StringBuilder sb = new StringBuilder();

        char[] chars = s.toCharArray();
        for(char c: chars)
        {
            if(Math.random() < alpha)
                sb.append(alphabet[ (int) (Math.random() * alphabet.length) ]);
            else
                sb.append(c);
        }
        return sb.toString();
    }


    public static ArrayList<String> select(ArrayList<String> population, String target)
    {
        PriorityQueue<ScoredString> queue = new PriorityQueue<>();
        population.forEach(string -> queue.add(new ScoredString(string, evaluate(string, target))));

        ArrayList<String> best = new ArrayList<>();
        int n = population.size() / 10;
        for(int i = 0; i < n; i++)
        {
            best.add(queue.poll().string);
        }
        return best;
    }


    public static int evaluate(String string, String target)
    {
        char[] s_chars = string.toCharArray();
        char[] t_chars = target.toCharArray();

        int score = 0;
        for(int i = 0; i < s_chars.length; i++)
        {
            if(s_chars[i] == t_chars[i])
                score++;
        }
        return score;
    }

}
